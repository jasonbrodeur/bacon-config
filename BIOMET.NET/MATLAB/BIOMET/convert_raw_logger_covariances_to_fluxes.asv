function convert_raw_logger_covariances_to_fluxes(year,SiteID)

% Compute EC fluxes from raw hhour covariances output from the CSI logger 
%  program. Could be used e.g. to gap fill EC fluxes calculated from HF data (the new_calc_and_save
% (matlab) code) 

% Procedure:
% 1. rotate and apply WPL corrections to raw covariances calculated by the
%    EC logger program
% 2. convert CO2 and H2O molar densities to mixing ratios and save avg, max
%    min and stdev for each to permit cleaning of the associated fluxes
% 3. Calculate ustar because we need to gapfill the ustar calculated from
%   HF data
% 4. Calculate fluxes based on the code in fr_calc_eddy
% 5. Save all traces to db so they can be loaded in FirstStage.ini and
%   cleaned and used in gapfilling

warning off;

pthFl   = biomet_path(year,SiteID,'Flux_Logger'); 

try
    tv      = read_bor(fullfile(biomet_path(year,SiteID),'Flux_Logger\TimeVector'),8);

    %load mean wind vector

    u = read_bor(fullfile(pthFl, 'u_wind_Avg'));
    v = read_bor(fullfile(pthFl, 'v_wind_Avg'));
    w = read_bor(fullfile(pthFl, 'w_wind_Avg'));

    meansIn = [u v w];

    % load raw covariances

    % c, H, u, v, w
    c_c = read_bor(fullfile(pthFl, 'CO2_cov_Cov1'));
    c_H = read_bor(fullfile(pthFl,'CO2_cov_Cov2'));
    c_u = read_bor(fullfile(pthFl,'CO2_cov_Cov3'));
    c_v = read_bor(fullfile(pthFl,'CO2_cov_Cov4'));
    c_w = read_bor(fullfile(pthFl,'CO2_cov_Cov5'));
    H_H = read_bor(fullfile(pthFl,'CO2_cov_Cov6'));
    H_u = read_bor(fullfile(pthFl,'CO2_cov_Cov7'));
    H_v = read_bor(fullfile(pthFl,'CO2_cov_Cov8'));
    H_w = read_bor(fullfile(pthFl,'CO2_cov_Cov9'));
    u_u = read_bor(fullfile(pthFl,'CO2_cov_Cov10'));
    u_v = read_bor(fullfile(pthFl,'CO2_cov_Cov11'));
    u_w = read_bor(fullfile(pthFl,'CO2_cov_Cov12'));
    v_v = read_bor(fullfile(pthFl,'CO2_cov_Cov13'));
    v_w = read_bor(fullfile(pthFl,'CO2_cov_Cov14'));
    w_w = read_bor(fullfile(pthFl,'CO2_cov_Cov15'));

    % % Tsonic, u, v, w
    T_T = read_bor(fullfile(pthFl,'Tsonic_cov_Cov1'));
    T_u = read_bor(fullfile(pthFl,'Tsonic_cov_Cov2'));
    T_v = read_bor(fullfile(pthFl,'Tsonic_cov_Cov3'));
    T_w = read_bor(fullfile(pthFl,'Tsonic_cov_Cov4'));


    co2_avg = read_bor(fullfile(pthFl,'CO2_Avg'));
    co2_std = read_bor(fullfile(pthFl,'CO2_Std'));
    co2_max = read_bor(fullfile(pthFl,'CO2_Max'));
    co2_min = read_bor(fullfile(pthFl,'CO2_Min'));

    h2o_avg = read_bor(fullfile(pthFl,'H2O_Avg'));
    h2o_std = read_bor(fullfile(pthFl,'H2O_Std'));
    h2o_max = read_bor(fullfile(pthFl,'H2O_Max'));
    h2o_min = read_bor(fullfile(pthFl,'H2O_Min'));

    Tair = read_bor(fullfile(pthFl,'Tsonic_Avg'));
    pbar = read_bor(fullfile(pthFl,'Irga_P_Avg'));

    % 1. ROTATION and WPL correction
    % rotation of raw covariances
    C1 = [u_u  u_v  v_v  u_w  v_w  w_w  c_u  c_v  c_w  c_c  H_u  H_v  H_w  c_H  H_H ];
    C2 = [u_u  u_v  v_v  u_w  v_w  w_w  T_u  T_v  T_w  T_T];

    disp(sprintf('%%%%%% Computing EC fluxes from raw logger covariances for %s, %s %%%%%%',SiteID,num2str(year)));
    disp(sprintf('....Rotating raw logger covariances'));
    [wT_rot,wH_rot,wc_rot,uw_rot,vw_rot] = rotate_cov_matrices(meansIn,C1,C2,T_w);

    % WPL for rotated and unrotated covariances
    if ~strcmp(upper(SiteID),'HP11')
       disp(sprintf('....applying WPL correction'));
       [Fc_wpl, E_wpl] = apply_WPL_correction(c_w,H_w,T_w,co2_avg,h2o_avg,Tair,pbar);  %unrotated
       [Fc_rot, E_rot] = apply_WPL_correction(wc_rot,wH_rot, wT_rot,co2_avg,h2o_avg, Tair, pbar);  %rotated
    else
        Fc
    % 2. CONVERT molar densities to MIXING RATIOS for LI-7500 sites (avg,stdev,max,min)

    if ~strcmp(upper(SiteID),'HP11') % HP11 has the LI-7200 which outputs mixing ratios
        disp(sprintf('....converting molar densities to mixing ratios'));
        [Cmix_avg, Hmix_avg,Cmolfr_avg, Hmolfr_avg] = fr_convert_open_path_irga(co2_avg,h2o_avg,Tair,pbar);
        [Cmix_std,Hmix_std,junk,junk]               = fr_convert_open_path_irga(co2_std,h2o_std,Tair,pbar);
        [Cmix_max,Hmix_max,junk,junk]               = fr_convert_open_path_irga(co2_max,h2o_max,Tair,pbar);
        [Cmix_min,Hmix_min,junk,junk]               = fr_convert_open_path_irga(co2_min,h2o_min,Tair,pbar);
    else
        Cmix_avg = co2_avg;
        Hmix_avg = h2o_avg;
        Cmix_std = co2_std;
        Hmix_std = h2o_std;
        Cmix_min = co2_min;
        Hmix_min = h2o_min;
        Cmix_max = co2_max;
        Hmix_max = h2o_max;
        Hmolfr_avg = Hmix_avg./(1+Hmix_avg/1000);
    end
  
    %3. CALCULATE Fluxes

    % (a) Fc is already in the correct units after the WPL correction

    % (b) LE is calculated as follows (see fr_calc_eddy)
    R     = 8.31451;
    ZeroK = 273.15;

    mol_density_dry_air   = (pbar./(1+Hmix_avg/1000)).*(1000./(R*(Tair+ZeroK)));

    disp(sprintf('....calculating LE from wH'));
    LE_rot = E_rot.*mol_density_dry_air;

    % (c) Sensible Heat is calculated as follows (see fr_calc_eddy)

    rho_moist_air = rho_air_wet(Tair,[],pbar,Hmolfr_avg);
    Cp_moist = spe_heat(Hmix_avg);

    disp(sprintf('....calculating H from wT'));
    Hsens_rot  = wT_rot .* rho_moist_air .* Cp_moist;

    % (d) Ustar

    disp(sprintf('....calculating Ustar from uw and vw'));
    ustar_rot=NaN.*ones(length(T_w),1); for i=1:length(uw_rot),ustar_rot(i)=(uw_rot(i)^2 + vw_rot(i)^2)^0.25; end

    % save all traces to local db

    pth_db = db_pth_root;

    disp(sprintf('....saving computed fluxes to %s',fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes')));
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','TimeVector'),8,tv);
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','co2_avg_irga_op_logger'),[],Cmix_avg);
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','h2o_avg_irga_op_logger'),[],Hmix_avg);
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','co2_std_irga_op_logger'),[],Cmix_std);
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','h2o_std_irga_op_logger'),[],Hmix_std);
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','co2_max_irga_op_logger'),[],Cmix_max);
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','h2o_max_irga_op_logger'),[],Hmix_max);
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','co2_min_irga_op_logger'),[],Cmix_min);
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','h2o_min_irga_op_logger'),[],Hmix_min);

    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','sonic_temperature_logger'),[],Tair);
    save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','barometric_pressure_logger'),[],pbar);

    sitestr=SiteID(1:2);
    switch upper(sitestr)
        case 'HP'
            save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','fc_blockavg_rotated_5m_op_logger'),[],Fc_rot);
            save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','le_blockavg_rotated_5m_op_logger'),[],LE_rot);
            save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','ustar_rotated_5m_op_logger'),[],ustar_rot);
            save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','h_sonic_blockavg_rotated_5m_logger'),[],Hsens_rot);
        case 'MP'
            save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','fc_blockavg_rotated_26m_op_logger'),[],Fc_rot);
            save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','le_blockavg_rotated_26m_op_logger'),[],LE_rot);
            save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','ustar_rotated_26m_op_logger'),[],ustar_rot);
            save_bor(fullfile(biomet_path(year,SiteID),'Flux_logger\computed_fluxes','h_sonic_blockavg_rotated_26m_logger'),[],Hsens_rot);
    end
catch
    disp(['... conversion/archiving of raw logger covariances to fluxes failed']);
end