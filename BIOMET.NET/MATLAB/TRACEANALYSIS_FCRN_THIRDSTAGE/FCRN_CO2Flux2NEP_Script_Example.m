%	FCRN_CO2Flux2NEP_Script_Example%	Provides an example of how to implement and use the %	FCRN_CO2Flux2NEP_Version1_Frozen function.%%	The input parts of the I/O code (lines 45-73) are %	included to show the variables that need to be loaded. %	The remaining parts of the program should be adaptable %	to other users.%	Written 13 Sept 2003 by Alan Barr.%	*********************************************************************************************%	*********************************************************************************************%	Special Notes:%	The NEP analysis is done one year at a time, but the %	data are input 14 months at a time, Dec-Jan, so that the % 	beginning and end of the year can be properly gap-filled. %	Theoretical top-of-the-atmosphere solar radiation is used %	to dileneate the day and night. %	This example uses Rsd rather than PPFD to model GEP; this %	is acceptable and is done because of the high quality %	of the BERMS Rsd data. However, the use of Rsd alters %	the meaning and interpretation of the bGEP coefficients.%	*********************************************************************************************%	*********************************************************************************************%	Assign initial variables.	DirRoot='s:\k_berms\';		Site='oa'; 	StnID=601; 	iYr=2001; 	uStarTH=0.35; 	mSEBClosure=0.85; 		DirNEP=[DirRoot Site '\flux\nep\']; 	cYr=num2str(iYr); 	% 	Input met variables, both gap-filled and not gap-filled. %	Here the data are input for Dec-Jan (14 months) %	to improve the Jan and Dec gap-filling analysis.  %	This example is specific to BERMS.			iaRsdTp=7; iaRpdTp=18; iaRsdTOA=82; iaTa=[22:26 35]; iaTs=[39 45]; 		[t,Rsd]=bAll2Var(Site,iYr-1,12,iYr+1,1,2,iaRsdTp); 	[t,Rpd]=bAll2Var(Site,iYr-1,12,iYr+1,1,2,iaRpdTp); 	[t,RsdTOA]=bAll2Var(Site,iYr-1,12,iYr+1,1,2,iaRsdTOA); 	[t,Ta]=bAll2Var(Site,iYr-1,12,iYr+1,1,2,iaTa); 		Ta=mynanmedian(Ta')'; 		pause; 	[t,Ts]=bAll2Var(Site,iYr-1,12,iYr+1,1,2,iaTs); 		Ts=mynanmean(Ts')'; 		[t,RsdGF]=bAll2Var(Site,iYr-1,12,iYr+1,1,3,iaRsdTp); 	[t,RpdGF]=bAll2Var(Site,iYr-1,12,iYr+1,1,3,iaRpdTp); 	[t,TaGF]=bAll2Var(Site,iYr-1,12,iYr+1,1,3,iaTa); 		TaGF=mynanmedian(TaGF')'; 	[t,TsGF]=bAll2Var(Site,iYr-1,12,iYr+1,1,3,iaTs); 		TsGF=mynanmean(TsGF')'; 	%	Input NEE and uStar.	%	This example is specific to BERMS.		ifNEE=11; ifuStar=9; 			[t,NEE]=bMat2Flx22Var(Site,iYr-1,12,iYr+1,1,ifNEE); 	[t,uStar]=bMat2Flx22Var(Site,iYr-1,12,iYr+1,1,ifuStar); 	%	Compute derived variables.				nt=length(t); 	[yy,mm,dd,hh,mn,ss]=mydatevec(t); 	iy=find(yy==iYr); 		fNight=(RsdTOA==0); 	iNight=find(fNight); 	Rsd(iNight)=0; 	Rpd(iNight)=0; 	%	Call FCRN_CO2Flux2NEP_Version1_Frozen to calculate NEP=GEP-R.%	Note that CoeffFile and iPlots are optional and control optional outputs.				CoeffFile=[DirNEP Site(1:2) 'm' cYr 'nep.coeff']; 	iPlots=1:5; 	[NEP,R,GEP,NEPgf,Rgf,GEPgf,RHat,GEPHat,RHat0,GEPHat0] = FCRN_CO2Flux2NEP_Version1_Frozen_030812(t,NEE,uStar,Rsd,Ta,Ts,RsdGF,TaGF,TsGF,fNight,uStarTH,mSEBClosure,CoeffFile,iPlots); 		%	Display annual totals.		c=12*30*60/1e6; % umol/m2/s to gC m-2 y-1; 	sNEP=c*mynansum(NEPgf(iy)); sR=c*mynansum(Rgf(iy)); sGEP=c*mynansum(GEPgf(iy)); 	nNEP=sum(isnan(NEPgf(iy))); nR=sum(isnan(Rgf(iy))); nGEP=sum(isnan(GEPgf(iy))); 	disp(sprintf('%s %4.0f  NEP:%5.0f R:%5.0f GEP:%5.0f   nMissing: %4.0f %4.0f %4.0f \n', Site,iYr, sNEP,sR,sGEP,nNEP,nR,nGEP)); 	%	Output half-hourly data by month.	% Define for ascii file format.		ncRecsPerDay=48; ncVars=15; 		icTableID=1; icYr=2; icDOY=3; icHrMnUTC=4; icStnID=5; 	icNEP=6; icR=7; icGEP=8; 	icNEPgf=9; icRgf=10; icGEPgf=11; 	icRMod=12; icGEPMod=13; 	icR0Mod=14; icGEP0Mod=15; 		xNEP=NaN*ones(nt,ncVars); 	xNEP(:,icTableID)=875; xNEP(:,icStnID)=StnID; 	xNEP(:,icYr)=yy; xNEP(:,icDOY)=doy(t); xNEP(:,icHrMnUTC)=hh*100+mn; 		xNEP(:,icNEP)=NEP; xNEP(:,icR)=R; xNEP(:,icGEP)=GEP; 	xNEP(:,icNEPgf)=NEPgf; xNEP(:,icRgf)=Rgf; xNEP(:,icGEPgf)=GEPgf; 	xNEP(:,icRMod)=RHat; xNEP(:,icGEPMod)=GEPHat; xNEP(:,icR0Mod)=RHat0; xNEP(:,icGEP0Mod)=GEPHat0; 		% Set NaN to missing (-999).		Missing=-999; xNEP(find(isnan(xNEP)))=Missing; 		%	Output. 			for iMo=1:12; 				tn=datenum(iYr,iMo,1,0,15,0); 		iEOM=eomday(iYr,iMo); tx=datenum(iYr,iMo,iEOM,24,15,0); 		it=find(t>tn & t<tx); 				if sum(sum(~isnan(xNEP(it,:))))>0; % do only if some good data exists for the month.						cDOY=num2str(datenum(iYr,iMo,iEOM)-datenum(iYr,1,1)+1); if length(cDOY)==2; cDOY=strcat('0',cDOY); end; 			cYr2=num2str(mod(iYr,100)); if length(cYr2)==1; cYr2=strcat('0',cYr2); end; 						FileNEP=[Site(1:2) 'm' cYr2 cDOY '.nep']; 			fidNEP=fopen(strcat(DirNEP,FileNEP),'w'); 			disp(sprintf('Saving %s.',FileNEP));  						xMask=''; VarsNEP=''; UnitsNEP=''; 			for icVar=1:ncVars; 				switch icVar;					case {icTableID,icDOY,icStnID}; Mask='%3i '; 					case {icYr,icHrMnUTC}; Mask='%4i '; 					otherwise; Mask='%8.3f '; 				end; 				lx=length(xMask); lm=length(Mask); xMask(lx+1:lx+lm)=Mask; 				switch icVar;					case icTableID; cVar='Table_ID'; cUnits='(875)'; 					case icYr; cVar='Year'; cUnits='(UTC)'; 					case icDOY; cVar='Day'; cUnits='(UTC)'; 					case icHrMnUTC; cVar='End_Time'; cUnits='(HrMn_UTC)'; 					case icStnID; cVar='Station_ID'; cUnits=strcat('(S',upper(Site),')'); 					case icNEP; cVar='NEP'; cUnits='(umol/m2/s)'; 					case icR; cVar='R'; cUnits='(umol/m2/s)'; 					case icGEP; cVar='GEP'; cUnits='(umol/m2/s)'; 					case icNEPgf; cVar='GapFilled_NEP'; cUnits='(umol/m2/s)'; 					case icRgf; cVar='GapFilled_R'; cUnits='(umol/m2/s)'; 					case icGEPgf; cVar='GapFilled_GEP'; cUnits='(umol/m2/s)'; 					case icRMod; cVar='Modelled_R'; cUnits='(umol/m2/s)'; 					case icGEPMod; cVar='Modelled_GEP'; cUnits='(umol/m2/s)'; 					case icR0Mod; cVar='Modelled_R0'; cUnits='(umol/m2/s)'; 					case icGEP0Mod; cVar='Modelled_GEP0'; cUnits='(umol/m2/s)'; 				end; 				VarsNEP=[VarsNEP cVar]; UnitsNEP=[UnitsNEP cUnits]; % preserves trailing spaces, which strcat does not.				if icVar~=ncVars; VarsNEP=[VarsNEP ' ']; UnitsNEP=[UnitsNEP ' ']; end; 			end; 			nMask='\n'; ln=length(nMask); 			lx=length(xMask); xMask(lx+1:lx+ln)=nMask; 			fprintf (fidNEP,'%c',VarsNEP); fprintf (fidNEP,'\n'); 			fprintf (fidNEP,'%c',UnitsNEP); fprintf (fidNEP,'\n'); 			fprintf (fidNEP,xMask,xNEP(it,:)'); 			fclose(fidNEP); 		end; 				end; % if sum(sum(~isnan(xNEP(it,:))))>0; 		end; % for iMo=1:12: 