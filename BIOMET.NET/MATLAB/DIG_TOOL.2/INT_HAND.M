% script int_hand.m
%
% Inputs:
%       cb_zoom:            handler for the zoom checbox
%       cb_data:            handler for the data checbox
%       int_states:         the previous checbox statuses (zoom and data checkbox)
%
% Outputs:
%       int_states:         the new checbox statuses (zoom and data checkbox)
%
%
%
% Comment:
%           int_hand script is the event handling routine that services the intrerrupts
%       generated by togling either of two checkboxes (zoom or data). It does switching
%       between data collection and zooming. The current status is remembered in int_states().
%       Because the zoom function causes the line on the top of the image to go the background
%       this procedure resets it to the foreground.
%
% (c) 1995, Zoran Nesic
%
%
if get(cb_zoom, 'value') ~= int_states(1) & get(cb_zoom, 'value') == 1
    set(cb_data, 'value', 0);
    int_states = [ 1 0];
    zoom on;
elseif get(cb_zoom, 'value') ~= int_states(1) & get(cb_zoom, 'value') == 0
    zoom off
    set(cb_data, 'value', 1)
    set(f1,'WindowButtonUpFcn','[PointOld, k, x, y, cb_plot] = getp(PointOld, k, x, y, cb, cb_plot);');
    set(f1,'pointer','crosshair');
    int_states = [ 0 1];
elseif get(cb_data, 'value') ~= int_states(2) & get(cb_data, 'value') == 1
    zoom off
    set(cb_zoom, 'value', 0)
    set(f1,'WindowButtonUpFcn','[PointOld, k, x, y, cb_plot] = getp(PointOld, k, x, y, cb, cb_plot);');
    set(f1,'pointer','crosshair');
    int_states = [ 0 1];
elseif get(cb_data, 'value') ~= int_states(2) & get(cb_data, 'value') == 0
    set(cb_zoom, 'value', 1)                
    int_states = [ 1 0];
    zoom on
end

%
% Put the line on the top of the image
%
if exist('cb_plot') == 1
    if cb_plot ~= []
        delete(cb_plot);
    end
end 
cb_plot = line( x, y,'r');



